{"name":"Django-dev-commands","tagline":"Useful commands for developing Django applications.","body":"django-dev-commands\r\n===================\r\n\r\nUseful commands for developing Django applications.\r\n\r\n## Available commands ##\r\n\r\n* `conf` - Show the value of loaded settings.\r\n* `run` - Run a python file within your Django project environment.\r\n* `settings` - Run other Django commands temporarily overriding some project settings.\r\n* `commands` - List only commands of the specified apps.\r\n* `call` - Call the given functions and print their results.\r\n\r\n## Getting help ##\r\n\r\nRun: `python manage.py <command> -h` for getting help of a command.\r\n\r\n## Examples ##\r\n\r\n### `conf` ###\r\n\r\n#### List all loaded settings ####\r\n\r\n    python manage.py conf\r\n\r\n#### Filter by setting name ####\r\n\r\nThe search is case insensitive and is treated as a regular expression.\r\n\r\n    python manage.py conf \"debug$\" \"use_tz\"\r\n\r\n### `run` ###\r\n\r\n#### Run a python file ####\r\n\r\nRun a python file within your Django environment:\r\n\r\n    python manage.py run path/to/my/script.py\r\n\r\nYou can also supply arguments to the file. `sys.argv` inside the\r\nscript will be the same as if the script is executed directly:\r\n\r\n    python manage.py run path/to/my/script.py:\"argument --another-argument=something\"\r\n\r\n#### Run multiple files ####\r\n\r\n    python manage.py run path/to/my/script_1.py path/to/my/script_2.py\r\n\r\n#### Interrupting execution within the running file ####\r\n\r\nYou can raise within a `CommandError` exception within your script anytime you want to interrupt the execution. Is not necessary that you import such an exception since it is available automatically in the execution environment:\r\n\r\nLet's say you have the following `main.py` script:\r\n\r\n```python\r\nfrom django.conf import settings\r\n\r\nif settings.DEBUG:\r\n    raise CommandError(\"Can't run if DEBUG is True!\")\r\n```\r\n\r\n### `settings` ###\r\n\r\n#### Temporarily override a setting while running a command ####\r\n\r\n\r\nLet's say you have the following `main.py` script:\r\n\r\n```python\r\nfrom django.conf import settings\r\n\r\nif settings.DEBUG:\r\n    raise CommandError(\"Can't run if DEBUG is True!\")\r\n```\r\n\r\nYou can turn **DEBUG** off while running the `run` command with:\r\n\r\n    python manage.py settings DEBUG=False --exec \"run path/to/main.py\"\r\n\r\nVery useful when running celery in my dev environment and I don't want any memory leak:\r\n\r\n    python manage.py settings DEBUG=False --exec \"celeryd\"\r\n\r\n#### You can pass any valid python code as a setting####\r\n\r\n    python manage.py settings \"DATABASES['default']['engine'] = 'django.db.backends.sqlite3'\" --exec \"runserver\"\r\n\r\n### `commands` ###\r\n\r\nList the available commands of only **auth** and **staticfiles**:\r\n\r\n    python manage.py commands auth staticfiles\r\n\r\n### `call` ###\r\n\r\n*TODO: Add support for passing argument and keyword arguments via the command line.*\r\n\r\n#### Call a function a print its results ####\r\n\r\n    python manage.py call django.core.management.get_commands\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}